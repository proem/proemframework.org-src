{% extends 'docs_layout.twig' %}
{% block content %}
<div class="well">
  <h3>The Filter Chain</h3>
  <p>
    The <em>Filter Chain Component</em> sits at the heart of Proem's {{ docLink('bootstrap', 'Bootsrap Process') }} and is used to easily flow through the logic required to setup and
    configure the other components within Proem. The <em>Filter Chain</em> itself is a fairly simple implementation of the
    <a href="http://java.sun.com/blueprints/corej2eepatterns/Patterns/InterceptingFilter.html">Filter Chain Pattern</a>, which really, is just a simple mechanism for executing a series of methods
    which are passed the same data to operate on.
  </p>
  <p>
    While within Proem the <em>Filter Chain</em> has a very specific use case (It is being used to filter an incoming request into an outgoing response), it has however also been designed flexibly
    enough to easily be used outside of that particular use case if need be.
  </p>
  <p>
    This means, if you have a need to filter data, the <em>Filter Chain</em> could potentially be a good place to start.
  </p>
</div>
<div class="well">
  <h3>Creating Filter Chain Events</h3>
  <p>
    Usage is fairly simple. First you need your <em>Chain Events</em>. These events must implement the Proem\Filter\Event\Template interface and (like most classes in Proem) there exists a
    Proem\Filter\Event\Generic abstract class that you can build on if desired.
  <p>
  <pre class="prettyprint">
    class Event1 extends Proem\Filter\Event\Generic
    {
        public function inBound(Proem\Service\Manager\Template $assets)
        {
            echo "event1 inBound\n";
        }

        public function outBound(Proem\Service\Manager\Template $assets)
        {
            echo "event1 outBound\n";
        }
    }

    class Event2 extends Proem\Filter\Event\Generic
    {
        public function inBound(Proem\Service\Manager\Template $assets)
        {
            echo "event2 inBound\n";
        }

        public function outBound(Proem\Service\Manager\Template $assets)
        {
            echo "event2 outBound\n";
        }
    }
  </pre>
</div>
<div class="well">
  <h3>Attaching Events to the Filter Manager</h3>
  <p>
    Then simply attach these to the <em>Filter Manager</em> and call <em>init()</em>.
  </p>
  <pre class="prettyprint">
    (new Proem\Filter\Manager\Standard)
        ->setServiceManager(new Proem\Service\Manager\Standard)
        ->attachEvent(new Event1)
        ->attachEvent(new Event2)
        ->init();
  </pre>
  <p>
    You can see from this example that the <em>Filter Manager</em> depends on a <em>Service Manager</em> being passed to into it. It is this manager that contains any assets you want to filter.
    It is passed into the <em>inBound</em> and <em>outBound()</em> methods as they are executed. The above example would produce:
  <p>
  <div class="alert alert-error">
    <p>
      Looking at the code while writing this documentation I can see that the dependency on the <em>Service Manager</em> needs to be better implemented or removed all together. See {{ issueLink(108) }}
    </p>
  </div>
  <pre>
    event1 inBound
    event2 inBound
    event2 outBound
    event1 outBound
  </pre>
  <p>
    You can also change the priority of events within the <em>Filter Chain</em> by passing a second argument to <em>attachEvent()</em>. The higher the number, the higher the priority, default is 0.
  </p>
  <pre class="prettyprint">
    (new Proem\Filter\Manager\Standard)
        ->setServiceManager(new Proem\Service\Manager\Standard)
        ->attachEvent(new Event1)
        ->attachEvent(new Event2, 200)
        ->init();
  </pre>
  <p>
    Produces:
  </p>
  <pre>
    event2 inBound
    event1 inBound
    event1 outBound
    event2 outBound
  </pre>
</div>
{{ disqus('/docs/dev/filter') }}
{% endblock %}
