{% extends "docs_layout.twig" %}
{% block content %}
<div class="well">
  <h2>Installation</h2>
  <p>
    There are a few different ways to install Proem for use. The first and easiest is to simply download the phar archive and include
    it where you need it, the second is to install via <a href="http://getcomposer.org">composer</a>, and the third is to download (or clone) the
    repository.
  <p>
  <p>
    Which one you choose really depends on what your going to do with Proem. If your planing on developing an application, I would recommend the <a href="http://getcomposer.org">composer</a>
    approach, if you want to help out with Proem development, obviously you'll need to clone the repository (see <a href="/contrib.html">Contributing</a>). The phar archive
    is an easy install, but not very flexible using an archive actually incurs quite a bit of overhead.
  </p>
</div>
<div class="well">
  <h3>Dependencies</h3>
  <p>
    Proem was developed from the ground up to take advantage of some of the newer features available in PHP5.4. As such it requires PHP5.4 to run.
  </p>
  <p>
    Other than the PHP5.4 dependency there are currently no other hard requirements to use Proem. If you want to help develop Proem, you will need to download the code (not the phar) and
    a few dependencies, all of which can be installed via <a href="http://getcomposer.org">composer</a> by running <code>composer.phar dev-install</code> from the root of the project.
  </p>
  <div class="alert alert-info">
    <p>The APC extension is <strong>highly</strong> recommended as it improves the performance of the autoloading mechanism considerably.</p>
  </div>
</div>
<div class="well">
  <h3>Using composer</h3>
  <p>
    The preferred method of starting a new project depending on Proem is to use <a href="http://getcomposer.org">composer</a> to install it.
  </p>
  <p>
    Make a directory to house your project, then within that directory create a <em>composer.json</em> file with the following content:
  </P>
  <pre class="prettyprint">
    {
      require: {
        "proem/proem": "0.7.0"
      }
    }
  </pre>
  <p>
    Now, install using composer: <code>composer.phar install</code>. This will create a <em>vendor</em> directory containing Proem and it's dependencies.
  </p>
  <p>
    Proem is now ready to use.
  </p>
  <pre class="prettyprint">
    include 'vendor/proem/proem/lib/Proem/Util/Autoloader.php';

    (new \Proem\Util\Autoloader)->register();
    (new \Proem\Proem)->init();
  </pre>
  <p>
    It is preferred to use Proem's autoloader (instead of composer's) as it takes advantage of APC being installed, though you could just as easily use
    composer's.
  </p>
</div>
<div class="well">
  <h3>Using the phar archive</h3>
  <p>
    The phar archive route is by far the easiest to get up and running with. Simply <a href="http://proemframework.org/downloads/proem.phar">download</a>
    the latest phar archive and include it into your bootstrap.php file for use.
  </p>
  <pre class="prettyprint">
    include 'phar://proem.phar';

    (new \Proem\Proem)->init();
  </pre>
</div>
<div class="well">
  <h3>Getting the code</h3>
  <p>
    You can get Proem's source by either downloading the latest package from <a href="https://github.com/proem/proem/downloads">Github</a> or by cloning the project
    from <a href="https://github.com">Github</a>. <code>git clone git://github.com/proem/proem.git</code>
  </p>
  <p>
    Once you have the source code, just include the Autoloader.
  </p>
  <pre class="prettyprint">
    require_once '/path/to/proem/lib/Proem/Util/Autoloader.php';

    (new \Proem\AutoLoader)->register();
    (new \Proem\Proem)->init();
  </pre>
</div>
<div class="well">
  <h3>Enable rewrite rules in Apache</h3>
  <p>
    In order for all the necessary requests to your server to be processed by Proem you need to rewrite these requests to your bootstrap (index.php) file.
  </p>
  <h5>
    Using the <a href="http://httpd.apache.org">Apache HTTP Server</a> you can do this by defining a simple rewrite rule:
  </h5>
  <pre>
    RewriteEngine on
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^(.*)$ index.php
  </pre>
</div>
{{ disqus('/docs/dev/installation') }}
{% endblock %}
